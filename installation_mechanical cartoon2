

//for the exact functioning of the button-->debounce & interrupt
//servo value: (152,155)-565( dir big),145-600 ( dir big2-Datan)185-565(dir small), 400=0(continuous...455 is appropriate for the clockwise)

//frame2 400,460
//frame3 400,350 (counterclockwise for dog)
//frame4 157,320
//frame5 185,480
//frame7 155, 470
//frame8 152,3,4,~253 new (160-260)

//pins: 14,15: leds of panel1
//pin1,2 :panel 2 (cyclists)
//pin 3,4,5,7,8 for panel 3,4,5,7,8
//no connection to pin6!

#include <Wire.h>
#include <Adafruit_PWMServoDriver.h>

// called this way, it uses the default address 0x40
Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver();


// define pins for button and led
int buttonPin =2;
boolean power =0;

//define time variables
long timeNow;//for the whole animation
boolean aniStarted = false;
long start;
boolean frameStarted = false;//for each frames
long trigger;


//set up the default value here, l for leds, m for servos

int d[8] = { 0,0,400,400,151,185,160,255};

//define state(for toggle button) and debounce time(for reading signal )
volatile int state = LOW;
long debouncing_time = 40; //Debouncing Time in Milliseconds
volatile unsigned long last_micros;

void setup() {
  Serial.begin(9600);
  pwm.begin();
  pwm.setPWMFreq(60);  // Analog servos run at ~60 Hz updates

  //set pinMode for button and led
  pinMode (buttonPin, INPUT);

  //pinMode (ledPin, OUTPUT);
  defaultValues();
  attachInterrupt(0, debounceInterrupt, RISING);

}


void loop() {



  // if power on, move as the timeline. there is no movement for frame6
  //power = digitalRead(buttonPin);
  //Serial.print("power: ");
  //Serial.println(power);

  

  if (state == 0){ 
    defaultValues();
    //Serial.println("stopped");
    aniStarted = false;
  }else{
    
    if (aniStarted == false){  
      Serial.println("start timer");
      //start the timer
      start = millis();
      frameStarted = false;
      defaultValues();
      aniStarted = true;
    }
    
    long duration = millis()-start;
   // Serial.print("dur: ");
   // Serial.println(duration);
    //leds from frame 1 should be on during the whole play

    // 0-4
    // 4-7
    //frame1(leds)
    if (duration<=2000 ){
      frame1();
    }
    //frame2(bicycles)
    else if (duration>2000 && duration < 4800 ){
      frame1();
      pwm.setPWM(1, 0, 495);
      pwm.setPWM(2, 0, 495);
    }
    
    //frame3(dog);
    else if (duration>=4800 && duration < 8500 ){
      frame1();
      pwm.setPWM(1, 0, d[2]);
      pwm.setPWM(2, 0, d[2]);
      
      delay(200);
      pwm.setPWM(3, 0, 368);
      
    }
    
  //frame4(workers)
    else if(duration >=8500 && duration < 10500){
     //the other frames that doesn't move
     pwm.setPWM(1, 0, d[2]);
     pwm.setPWM(2, 0, d[2]);
     pwm.setPWM(3, 0, d[3]);
     
     //reciprocal mov. 
     //pwm.setPWM(4, 0, 152);
     //delay(1000);
     delay(600);
     pwm.setPWM(4, 0, 500);
     delay(800);
     pwm.setPWM(4, 0, 154);
     delay(800);
     pwm.setPWM(4, 0, 500);
     delay(800);
      pwm.setPWM(4, 0, 154);
     delay(800);
   
     
  
     }
     
     //frame5 (tram)
     else if(duration >=10500 && duration < 13000){
       Serial.println("tram");
     //the other frames that doesn't move
     frame1();
     pwm.setPWM(1, 0, d[2]);
     pwm.setPWM(2, 0, d[2]);
     pwm.setPWM(3, 0, d[3]);
     pwm.setPWM(4, 0, d[4]);
     
     //reciprocal mov. 
     
     pwm.setPWM(5, 0, 480);
     delay(600);
     pwm.setPWM(5, 0, 185);
     delay(600);
     pwm.setPWM(5, 0, 480);
     delay(600);
     pwm.setPWM(5, 0, 185);
     delay(600);
     pwm.setPWM(5, 0, 480);
     delay(600);
     pwm.setPWM(5, 0, 185);
     delay(600);
     pwm.setPWM(5, 0, 480);
    
      duration = millis()-start;
    Serial.print("dur: ");
    Serial.println(duration);
    
     }
     
      //frame7 (umbrella)
      else if(duration >= 15000 && duration < 17000){
        Serial.println("umbrella");
     //the other frames that doesn't move
     frame1();
     pwm.setPWM(1, 0, d[2]);
     pwm.setPWM(2, 0, d[2]);
     pwm.setPWM(3, 0, d[3]);
     pwm.setPWM(4, 0, d[4]);
     pwm.setPWM(5, 0, d[5]);
     //reciprocal mov. 
      delay(400);
     pwm.setPWM(7, 0, 470);
     delay(1300);
     pwm.setPWM(7, 0, 145);
     delay(1300);
     pwm.setPWM(7, 0, 470);
     delay(1300);
     
    
     }
      //frame8 (camera)
      else if(duration >= 20000 && duration < 22000){
        Serial.println("camera");
     //the other frames that doesn't move
     frame1();
     pwm.setPWM(1, 0, d[2]);
     pwm.setPWM(2, 0, d[2]);
     pwm.setPWM(3, 0, d[3]);
     pwm.setPWM(4, 0, d[4]);
     pwm.setPWM(5, 0, d[5]);
      pwm.setPWM(7, 0, d[6]);
     
     //reciprocal mov. 
    
    delay(1500); 
     pwm.setPWM(8, 0, 160);
     delay(2000);
     pwm.setPWM(8, 0, 255);
     
     
     }
     
  
    else{
      //reset the values
      //defaultValues(); 
      state=0;
      //reset the timer


    } 
  }
}

void debounceInterrupt() {
  if((long)(micros() - last_micros) >= debouncing_time * 1000) {
   stateChange();
    last_micros = micros();
  }
}

void stateChange()
{

    state = !state;

}

//set default values by calling this fuction.
void defaultValues(){

  pwm.setPWM(14, 0, d[0]);//for leds
  pwm.setPWM(15, 0, d[1]);

  pwm.setPWM(1, 0, d[2]);//for motors
  pwm.setPWM(2, 0, d[2]);

  pwm.setPWM(3, 0, d[3]);
  pwm.setPWM(4, 0, d[4]);
  pwm.setPWM(5, 0, d[5]);
  pwm.setPWM(7, 0, d[6]);
  pwm.setPWM(8, 0, d[7]);

}



//for master panel, light up leds, pin14,15 is for leds  
//!!set the runTime again. 
void frame1(){

  // pwm.setPWM(14, 0, 4000);
  pwm.setPWM(15, 0, 4000);

}


