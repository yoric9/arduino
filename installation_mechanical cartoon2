

//interrupt -->arduino 
//separate default functions later??
// continous:change direction and speed from the middle value.


// Questions
//pinMode (buttonPin, INPUT_PULLUP);?? should write pullup??
//at SETUP, even timeNow cannot be written? then where?? Where should I start the timer??
//Where should I resest the frameStarted to faulse? at the end of each function??
//about repeating a few times...for function in frame4...
// to make frame on for the whole animation
//in this code animation works only while the switch being pushed.?!?


//to do's
//figure out the direction of the directional servo movements. 
//define   long timeNow; on the top (outside the setup)
//each fuction run simply by specific angle and the timer works only in loop. for example,  
/*if (2000<duration && duration<4000){
 frame2();
 }*/

//for each if else, write down everyother frames that doesn't work at the moment and led's on
//for the reciprocal mov. just say position and delay
//we used interrupt, and debounce of Arduino


//servo value: (152,155)-565( dir big), 185-565(dir small), 400=0(continuous...455 is appropriate for the clockwise)

//frame2 400,460
//frame3 400,350 (counterclockwise for dog)
//frame4 157,320
//frame5 185,480
//frame7 155, 470
//frame8 152,3,4,~253

//pins: 14,15: leds of panel1
//pin1,2 :panel 2 (cyclists)
//pin 3,4,5,7,8 for panel 3,4,5,7,8
//no connection to pin6!

#include <Wire.h>
#include <Adafruit_PWMServoDriver.h>

// called this way, it uses the default address 0x40
Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver();


// define pins for button and led
int buttonPin =2;
boolean power =0;

//define time variables
long timeNow;//for the whole animation
boolean aniStarted = false;
long start;
boolean frameStarted = false;//for each frames
long trigger;


//set up the default value here, l for leds, m for servos
int d[8] = { 0,0,400,400,155,185,155,155};

//define state(for toggle button) and debounce time(for reading signal )
volatile int state = LOW;
long debouncing_time = 40; //Debouncing Time in Milliseconds
volatile unsigned long last_micros;

void setup() {
  Serial.begin(9600);
  pwm.begin();
  pwm.setPWMFreq(60);  // Analog servos run at ~60 Hz updates

  //set pinMode for button and led
  pinMode (buttonPin, INPUT);

  //pinMode (ledPin, OUTPUT);
  defaultValues();
  attachInterrupt(0, debounceInterrupt, RISING);

}


void loop() {



  // if power on, move as the timeline. there is no movement for frame6
  //power = digitalRead(buttonPin);
  //Serial.print("power: ");
  //Serial.println(power);

  

  if (state == 0){ 
    defaultValues();
    Serial.println("stopped");
    aniStarted = false;
  }else{
    
    if (aniStarted == false){  
      Serial.println("start timer");
      //start the timer
      start = millis();
      frameStarted = false;
      defaultValues();
      aniStarted = true;
    }
    
    long duration = millis()-start;
    Serial.print("dur: ");
    Serial.println(duration);
    //leds from frame 1 should be on during the whole play

    // 0-4
    // 4-7
    if (duration<=4000 ){
      frame1();
    }
    else if (duration>4000 && duration < 6000 ){
      frame1();
      pwm.setPWM(1, 0, 445);
      pwm.setPWM(2, 0, 445);
    }
    
    else if(duration >=6000 && duration < 10000){
     //the other frames that doesn't move
     pwm.setPWM(2, 0, d[2]);
     
     //reciprocal mov. 
     pwm.setPWM(4, 0, 150);
     delay(1000);
     pwm.setPWM(4, 0, 400);
     delay(1000);
     pwm.setPWM(4, 0, 150);
     delay(1000);
     pwm.setPWM(4, 0, 400);
     delay(1000);
     //frame3();
     }
      else if(duration >=10000 && duration < 13000){
     //the other frames that doesn't move
     frame1();
     pwm.setPWM(2, 0, d[2]);
     pwm.setPWM(4, 0, d[4]);
     
     //reciprocal mov. 
     pwm.setPWM(5, 0, 185);
     delay(1000);
     pwm.setPWM(5, 0, 480);
     delay(1000);
     pwm.setPWM(5, 0, 185);
     delay(1000);
     pwm.setPWM(5, 0, 480);
     delay(1000);
     //frame3();
     }
     /*else if(time3<duration <time4){
     frame4();
     }else if(time4<duration <time5){
     frame5();
     }else if(time5<duration <time7){
     frame7();
     }else if(time7<duration <time8){
     frame8();
     }
     
     
     }
     
     */
    else{
      //reset the values
      //defaultValues(); 
      state=0;
      //reset the timer


    } 
  }
}

void debounceInterrupt() {
  if((long)(micros() - last_micros) >= debouncing_time * 1000) {
   stateChange();
    last_micros = micros();
  }
}

void stateChange()
{

    state = !state;

}

//set default values by calling this fuction.
void defaultValues(){

  pwm.setPWM(14, 0, d[0]);//for leds
  pwm.setPWM(15, 0, d[1]);

  pwm.setPWM(1, 0, d[2]);//for motors
  pwm.setPWM(2, 0, d[2]);

  pwm.setPWM(3, 0, d[3]);
  pwm.setPWM(4, 0, d[4]);
  pwm.setPWM(5, 0, d[5]);
  pwm.setPWM(7, 0, d[6]);
  pwm.setPWM(8, 0, d[7]);

}



//for master panel, light up leds, pin14,15 is for leds  
//!!set the runTime again. 
void frame1(){

  // pwm.setPWM(14, 0, 4000);
  pwm.setPWM(15, 0, 4000);

}


//for Cyclists pin#1,2


void frame2(){

  if(frameStarted == false){
    trigger= millis();
    frameStarted = true;
  }

  long runTime= millis()-trigger;
  if(runTime >0 && runTime <2000){
    pwm.setPWM(1, 0, 445);
    pwm.setPWM(2, 0, 445);
  }
  else{ 
    pwm.setPWM(1, 0, 400);
    pwm.setPWM(2, 0, 400);
    frameStarted = false;
  }
  //resetting the frameStarted to false
}


/*

 //for dog pin#3(dog rotates counterclockwise)
 void frame3(){
 
 long start = millis();
 long runTime = millis()-start;
 
 if (runTime <2000){
 pwm.setPWM(3, 0, 355);
 }else{
 pwm.setPWM(3, 0, 400);
 }
 }
 
 //for workers pin#4 degree 40 = pulselength 246
 //workers moves for 3 times
 void frame4(){
 
 
 long start = millis();
 long runTime = millis()-start;
 
 if (runTime <2000){
 for (int i=0;i<3;i++){
 pwm.setPWM(4, 0, 246);
 delay(100);
 pwm.setPWM(4, 0, 155);
 delay(50);
 }
 }
 }
 
 //for tram pin#5 120 degree= 438 pulselength
 //tram moves for 4 times
 //tram uses the smaller servo of which lowest value is 185
 void frame5(){
 
 long start = millis();
 long runTime = millis()-start;
 
 if (runTime <2000){
 for (int i=0;i<4;i++){
 pwm.setPWM(5, 0, 435);
 delay(10);
 pwm.setPWM(5, 0, 185);
 delay(10);
 }
 }
 }
 
 //for umbrella pin#7 90degrees=360pulselength
 void frame7(){
 
 long start = millis();
 long runTime = millis()-start;
 
 if (runTime <2000){
 for (int i=0;i<2;i++){
 pwm.setPWM(7, 0, 360);
 delay(100);
 pwm.setPWM(7, 0, 155);
 delay(50);
 }
 }
 }
 
 
 //for camera pin#8 17degrees=193 pulselength
 void frame8(){
 
 long start = millis();
 long runTime = millis()-start;
 
 if (runTime <2000){
 
 pwm.setPWM(8, 0, 193);
 delay(200);
 pwm.setPWM(8, 0, 155);
 }
 }
 */


